// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// user_roles
model UserRoles {
  id          Int    @id @default(autoincrement())
  name        String @unique
  label       String
  description String
  User        User[]

  @@map("user_roles")
}

// sports
model Sport {
  id   Int    @id @default(autoincrement())
  name String @unique

  @@map("sports")
}

// users
model User {
  id                String   @id @default(uuid()) @db.Uuid
  email             String   @unique
  name              String   @db.VarChar(32)
  surname           String   @db.VarChar(32)
  nickname          String   @unique @db.VarChar(16)
  birthday          DateTime
  height            Int?     @db.SmallInt
  weight            Int?     @db.SmallInt
  gender            String   @db.VarChar(16)
  position          String?  @db.VarChar(32)
  preferred_foot    String?  @db.VarChar(16)
  show_gender       Boolean  @default(true)
  show_height       Boolean  @default(true)
  show_weight       Boolean  @default(true)
  country_code      String   @db.Char(2)
  is_private        Boolean  @default(false)
  is_active         Boolean  @default(true)
  current_latitude  Float?   @db.Real
  current_longitude Float?   @db.Real
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  role_name String
  role      UserRoles @relation(fields: [role_name], references: [name])

  // Messaging relationships
  sentMessages       Message[]      @relation("SentMessages")
  receivedMessages   Message[]      @relation("ReceivedMessages")
  conversations1     Conversation[] @relation("User1Conversations")
  conversations2     Conversation[] @relation("User2Conversations")

  // Friend relationships
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends1              Friend[]        @relation("User1Friends")
  friends2              Friend[]        @relation("User2Friends")

  // Match lobby relationships
  createdLobbies         MatchLobby[]        @relation("CreatedLobbies")
  matchParticipations    MatchParticipant[]  @relation("MatchParticipations")
  sentMatchInvitations   MatchInvitation[]   @relation("SentMatchInvitations")
  receivedMatchInvitations MatchInvitation[] @relation("ReceivedMatchInvitations")

  // Team match relationships
  createdTeamMatches     TeamMatch[]         @relation("CreatedTeamMatches")

  // Notification relationships
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")

  // Team relationships
  createdTeams          Team[]         @relation("CreatedTeams")
  teamMembers           TeamMember[]   @relation("TeamMembers")

  @@map("users")
}

// conversations
model Conversation {
  id          String   @id @default(uuid()) @db.Uuid
  user1_id    String   @db.Uuid
  user2_id    String   @db.Uuid
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user1    User      @relation("User1Conversations", fields: [user1_id], references: [id], onDelete: Cascade)
  user2    User      @relation("User2Conversations", fields: [user2_id], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([user1_id, user2_id])
  @@map("conversations")
}

// messages
model Message {
  id              String   @id @default(uuid()) @db.Uuid
  conversation_id String   @db.Uuid
  sender_id       String   @db.Uuid
  receiver_id     String   @db.Uuid
  content         String
  message_type    String   @default("text") @db.VarChar(20)
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender       User         @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver     User         @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

// friend_requests
model FriendRequest {
  id          String   @id @default(uuid()) @db.Uuid
  sender_id   String   @db.Uuid
  receiver_id String   @db.Uuid
  status      String   @default("pending") @db.VarChar(20) // pending, accepted, rejected
  message     String?  @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  sender   User @relation("SentFriendRequests", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedFriendRequests", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@unique([sender_id, receiver_id])
  @@map("friend_requests")
}

// friends
model Friend {
  id         String   @id @default(uuid()) @db.Uuid
  user1_id   String   @db.Uuid
  user2_id   String   @db.Uuid
  created_at DateTime @default(now())

  user1 User @relation("User1Friends", fields: [user1_id], references: [id], onDelete: Cascade)
  user2 User @relation("User2Friends", fields: [user2_id], references: [id], onDelete: Cascade)

  @@unique([user1_id, user2_id])
  @@map("friends")
}

// match_lobbies - Maç lobisi
model MatchLobby {
  id              String   @id @default(uuid()) @db.Uuid
  title           String   @db.VarChar(255) // Maç başlığı
  description     String?  @db.Text // Maç açıklaması
  location        String   @db.VarChar(255) // Konum
  latitude        Float? // Enlem
  longitude       Float? // Boylam
  date            DateTime // Maç tarihi
  duration        Int      @default(90) // Süre (dakika)
  max_players     Int      @default(22) // Maksimum oyuncu sayısı
  current_players Int      @default(0) // Mevcut oyuncu sayısı
  price_per_person Float?  // Kişi başı ücret
  is_private      Boolean  @default(false) // Özel maç mı
  is_reward_match Boolean  @default(false) // Ödüllü maç mı
  reward_description String? @db.Text // Ödül açıklaması
  time_over       Boolean  @default(false) // Maç süresi geçti mi
  status          String   @default("open") @db.VarChar(20) // open, full, started, finished, cancelled
  creator_id      String   @db.Uuid // Lobiciyi oluşturan kullanıcı
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  creator      User                @relation("CreatedLobbies", fields: [creator_id], references: [id], onDelete: Cascade)
  participants MatchParticipant[]
  invitations  MatchInvitation[]

  @@map("match_lobbies")
}

// match_participants - Maça katılan oyuncular
model MatchParticipant {
  id           String   @id @default(uuid()) @db.Uuid
  lobby_id     String   @db.Uuid
  user_id      String   @db.Uuid
  status       String   @default("joined") @db.VarChar(20) // joined, left, kicked
  position     String?  @db.VarChar(50) // Oyuncu pozisyonu
  joined_at    DateTime @default(now())
  updated_at   DateTime @updatedAt

  lobby MatchLobby @relation(fields: [lobby_id], references: [id], onDelete: Cascade)
  user  User       @relation("MatchParticipations", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([lobby_id, user_id])
  @@map("match_participants")
}

// match_invitations - Maç davetleri
model MatchInvitation {
  id         String   @id @default(uuid()) @db.Uuid
  lobby_id   String   @db.Uuid
  sender_id  String   @db.Uuid
  receiver_id String  @db.Uuid
  status     String   @default("pending") @db.VarChar(20) // pending, accepted, rejected
  message    String?  @db.Text // Davet mesajı
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  lobby    MatchLobby @relation(fields: [lobby_id], references: [id], onDelete: Cascade)
  sender   User       @relation("SentMatchInvitations", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver User       @relation("ReceivedMatchInvitations", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@unique([lobby_id, receiver_id])
  @@map("match_invitations")
}

// notifications - Bildirimler
model Notification {
  id          String   @id @default(uuid()) @db.Uuid
  type        String   @db.VarChar(50) // match_join_request, friend_request, match_invitation, etc.
  title       String   @db.VarChar(255)
  message     String   @db.Text
  sender_id   String   @db.Uuid
  receiver_id String   @db.Uuid
  status      String   @default("unread") @db.VarChar(20) // unread, read, accepted, rejected
  related_id  String?  @db.Uuid // İlgili kayıt ID'si (lobby_id, friend_request_id, etc.)
  metadata    Json?    // Ek bilgiler için JSON alan
  is_read     Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  sender   User @relation("SentNotifications", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedNotifications", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// teams - Takımlar
model Team {
  id              String   @id @default(uuid()) @db.Uuid
  name            String   @db.VarChar(100) // Takım adı
  description     String?  @db.Text // Takım açıklaması
  city            String   @db.VarChar(100) // Şehir
  level           String   @db.VarChar(50) // Seviye (amateur, semi-pro, professional)
  max_players     Int      @default(22) // Maksimum oyuncu sayısı
  current_players Int      @default(0) // Mevcut oyuncu sayısı
  logo_url        String?  @db.VarChar(255) // Takım logosu
  is_active       Boolean  @default(true) // Aktif mi
  creator_id      String   @db.Uuid // Takımı oluşturan kullanıcı
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  creator      User         @relation("CreatedTeams", fields: [creator_id], references: [id], onDelete: Cascade)
  members      TeamMember[]
  homeMatches  TeamMatch[]  @relation("HomeTeamMatches")
  awayMatches  TeamMatch[]  @relation("AwayTeamMatches")

  @@map("teams")
}

// team_members - Takım üyeleri
model TeamMember {
  id         String   @id @default(uuid()) @db.Uuid
  team_id    String   @db.Uuid
  user_id    String   @db.Uuid
  position   String?  @db.VarChar(50) // Oyuncu pozisyonu
  role       String   @default("member") @db.VarChar(20) // member, captain, coach
  joined_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  team Team @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user User @relation("TeamMembers", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([team_id, user_id])
  @@map("team_members")
}

// team_matches - Takım maçları
model TeamMatch {
  id              String   @id @default(uuid()) @db.Uuid
  title           String   @db.VarChar(255) // Maç başlığı
  description     String?  @db.Text // Maç açıklaması
  location        String   @db.VarChar(255) // Konum
  latitude        Float? // Enlem
  longitude       Float? // Boylam
  date            DateTime // Maç tarihi
  duration        Int      @default(90) // Süre (dakika)
  match_type      String   @db.VarChar(20) // 5v5, 7v7, 11v11
  price_per_person Float?  // Kişi başı ücret
  home_team_id    String   @db.Uuid // Ev sahibi takım
  away_team_id    String?  @db.Uuid // Deplasman takımı (null ise rakip aranıyor)
  status          String   @default("open") @db.VarChar(20) // open, matched, confirmed, started, finished, cancelled
  creator_id      String   @db.Uuid // Maçı oluşturan kullanıcı
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  creator   User      @relation("CreatedTeamMatches", fields: [creator_id], references: [id], onDelete: Cascade)
  homeTeam  Team      @relation("HomeTeamMatches", fields: [home_team_id], references: [id], onDelete: Cascade)
  awayTeam  Team?     @relation("AwayTeamMatches", fields: [away_team_id], references: [id], onDelete: Cascade)

  @@map("team_matches")
}
